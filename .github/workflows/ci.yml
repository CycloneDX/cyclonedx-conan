# encoding: utf-8

# This file is part of CycloneDX Python
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
# Copyright (c) OWASP Foundation. All Rights Reserved.

name: Python CI

on:
  push:
    branches: [ main ]
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION_DEFAULT: "3.9"
  POETRY_VERSION: "1.1.15"
  REPORTS_DIR: CI_reports

jobs:
  coding-standards:
    # disabled, unless there are proper rules and configs for flake8 and mypy
    if: false
    name: Linting & Coding Standards
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        # see https://github.com/actions/checkout
        uses: actions/checkout@v3
      - name: Setup Python Environment
        # see https://github.com/actions/setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION_DEFAULT }}
          architecture: 'x64'
      - name: Install poetry
        # see https://github.com/marketplace/actions/setup-poetry
        uses: Gr1N/setup-poetry@v8
        with:
          poetry-version: ${{ env.POETRY_VERSION }}
      - name: Install dependencies
        run: poetry install --no-root
#      - name: Run tox
#        run: poetry run tox -e flake8

  build-and-test:
    name: Tests py${{ matrix.python-version }} ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    env:
      REPORTS_ARTIFACT: tests-reports
    timeout-minutes: 10
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
          - macos-latest
        python-version: 
          - '3.11'  # highest supported
          - '3.10'
          - '3.9'
          - '3.8'
          - '3.7'
          - '3.6'   # lowest supported
        exclude:
          - # py36 is not available on ubuntu-latest
            python-version: '3.6'
            os: ubuntu-latest
          - # poetry installer on macos-latest with py311 has issues
            python-version: '3.11'
            os: macos-latest
        include:
          - # py36 is not available after ubuntu-20.04
            python-version: '3.6'
            os: ubuntu-20.04
    steps:
      - name: Checkout
        # see https://github.com/actions/checkout
        uses: actions/checkout@v3
      - name: Create reports directory
        run: mkdir ${{ env.REPORTS_DIR }}
      - name: Setup Python Environment
        # see https://github.com/actions/setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          architecture: 'x64'
      - name: Install poetry
        # see https://github.com/marketplace/actions/setup-poetry
        uses: Gr1N/setup-poetry@v8
        with:
          poetry-version: ${{ env.POETRY_VERSION }}
      - name: Install dependencies
        run: poetry install --no-root
      - name: Ensure build successful
        run: poetry build
#      - name: Run tox
#        run: poetry run tox -e py${{ matrix.python-version }}
#      - name: Generate coverage reports
#        run: >
#          poetry run coverage report &&
#          poetry run coverage xml -o ${{ env.REPORTS_DIR }}/coverage-${{ matrix.os }}-${{ matrix.python-version }}.xml &&
#          poetry run coverage html -d ${{ env.REPORTS_DIR }}
#      - name: Artifact reports
#        if: ${{ ! cancelled() }}
#        # see https://github.com/actions/upload-artifact
#        uses: actions/upload-artifact@v2
#        with:
#          name: ${{ env.REPORTS_ARTIFACT }}
#          path: ${{ env.REPORTS_DIR }}
#          if-no-files-found: error